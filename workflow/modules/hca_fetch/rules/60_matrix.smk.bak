# workflow/rules/60_matrix.smk

rule generate_matrix:
    """
    Generate STARsolo count matrix (per sample).
    IMPORTANT: STARsolo's --readFilesIn order is cDNA (R2) first, then CB/UMI (R1).
    """
    conda: "workflow/envs/star.yaml"
    input:
        r1           = os.path.join(fastq_dir, "{project}", "{sample}", "R1.fastq.gz"),
        r2           = os.path.join(fastq_dir, "{project}", "{sample}", "R2.fastq.gz"),
        genomeDir    = index_dir,
        cb_whitelist = lambda wc: wl_for_sample(wc.sample)
    output:
        matrix       = os.path.join(counts_dir, "{project}", "{sample}_matrix.txt")
    threads: threads
    params:
        # STAR will prepend files with this prefix; matrix_counts.sh will collapse to *_matrix.txt
        prefix       = lambda wc, output: os.path.splitext(output.matrix)[0] + "_",
        cb_len       = lambda wc: param_map[ chem_map[wc.sample] ]["cb"],
        umi_len      = lambda wc: param_map[ chem_map[wc.sample] ]["umi"],
        layer        = config.get("counts_layer", "filtered"),
        features_str = " ".join(config.get("solo_features", ["Gene"])),
        script       = scripts["matrix_counts"]
    shell:
        r"""
        COUNT_LAYER="{params.layer}" \
        SOLO_FEATURES="{params.features_str}" \
        bash "{params.script}" \
          "{input.r1}" \
          "{input.r2}" \
          "{input.genomeDir}" \
          "{input.cb_whitelist}" \
          "{params.prefix}" \
          "{output.matrix}" \
          {params.cb_len} {params.umi_len} {threads}
        """
